const nodemailer = require('nodemailer');
const subscriptionService = require('./subscriptionService');

/**
 * Service for sending emails using Nodemailer
 */
class EmailService {
    constructor() {
        // Create reusable transporter object using SMTP transport
        this.transporter = nodemailer.createTransport({
            host: 'smtp.gmail.com',
            port: 465,
            secure: true, // use SSL
            auth: {
                user: process.env.EMAIL,
                pass: process.env.APP_PASSWORD
            },
            debug: true // Enable debug logging
        });

        // Verify connection configuration
        this.transporter.verify(function(error, success) {
            if (error) {
                console.error('SMTP Connection Error:', error);
            } else {
        
            }
        });
    }

    /**
     * Formats a single quiz into HTML
     * @param {Object} quiz - The quiz object
     * @param {number} index - The quiz number
     * @returns {string} Formatted quiz HTML
     */
    formatQuizHTML(quiz, index) {
        return `
            <div style="margin-bottom: 30px; padding: 20px; background-color: #f8f9fa; border-radius: 5px;">
                <h3 style="color: #2c3e50; margin-bottom: 15px;">Question ${index + 1}</h3>
                <p style="font-weight: bold; margin-bottom: 15px;">${quiz.question}</p>
                
                <div style="margin-left: 20px; margin-bottom: 15px;">
                    ${Object.entries(quiz.choices).map(([key, value]) => `
                        <p style="margin: 5px 0;">
                            <strong>${key}.</strong> ${value}
                        </p>
                    `).join('')}
                </div>

                <div style="margin-top: 15px; padding: 10px; background-color: #e8f4f8; border-radius: 3px;">
                    <p style="margin: 0;"><strong>Correct Answer:</strong> ${quiz.correct}</p>
                    <p style="margin: 5px 0 0 0;"><strong>Explanation:</strong> ${quiz.explanation}</p>
                </div>
            </div>
        `;
    }

    /**
     * Creates HTML content for the email
     * @param {Object} content - The generated content
     * @returns {string} Formatted HTML content
     */
    createEmailContent(content) {
        const quizzesHTML = content.quizzes.map((quiz, index) => 
            this.formatQuizHTML(quiz, index)
        ).join('');
        
        const keyPointsHTML = content.keyPoints.map(point => 
            `<li style="margin-bottom: 10px; line-height: 1.6;">${point}</li>`
        ).join('');

        const explanationHTML = content.explanation.map((point, index) => 
            `<li style="margin-bottom: 15px; line-height: 1.8; text-align: justify;">${point}</li>`
        ).join('');
        
        return `
            <div style="font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto;">
                <h1 style="color: #2c3e50; text-align: center; margin-bottom: 30px;">üìò ${content.title}</h1>
                
                <div style="background-color: #f8f9fa; padding: 25px; border-radius: 5px; margin: 20px 0;">
                    <h2 style="color: #34495e; margin-bottom: 15px;">üìñ Detailed Explanation</h2>
                    <ol style="padding-left: 20px; margin: 0;">
                        ${explanationHTML}
                    </ol>
                </div>

                <div style="background-color: #e8f4f8; padding: 25px; border-radius: 5px; margin: 20px 0;">
                    <h2 style="color: #34495e; margin-bottom: 15px;">üîë Key Points</h2>
                    <ul style="padding-left: 20px; margin: 0;">
                        ${keyPointsHTML}
                    </ul>
                </div>

                <div style="background-color: #f8f9fa; padding: 25px; border-radius: 5px; margin: 20px 0;">
                    <h2 style="color: #34495e; margin-bottom: 15px;">üí° Real-life Analogy</h2>
                    <p style="line-height: 1.8; text-align: justify;">${content.analogy}</p>
                </div>

                <div style="margin: 30px 0;">
                    <h2 style="color: #34495e; text-align: center; margin-bottom: 25px;">‚ùì Daily Quiz Questions</h2>
                    ${quizzesHTML}
                </div>

                <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee; color: #7f8c8d; font-size: 0.9em;">
                    <p>This email was automatically generated by your Daily Network Learning Bot</p>
                    <p style="margin-top: 10px;">
                        <a href="${process.env.UNSUBSCRIBE_URL || 'http://localhost:3000/unsubscribe'}?email={{EMAIL}}" 
                           style="color: #3498db; text-decoration: none;">Unsubscribe</a> | 
                        <a href="${process.env.PREFERENCES_URL || 'http://localhost:3000/preferences'}?email={{EMAIL}}" 
                           style="color: #3498db; text-decoration: none;">Update Preferences</a>
                    </p>
                </div>
            </div>
        `;
    }

    /**
     * Sends the email with the generated content to all subscribed users
     * @param {Object} content - The generated content
     * @returns {Promise<Object>} Email sending results
     */
    async sendEmail(content) {
        try {
            // Get all active subscriptions
            const activeSubscriptions = await subscriptionService.getActiveSubscriptions();
            
            if (activeSubscriptions.length === 0) {
                return {
                    success: true,
                    message: 'No active subscriptions',
                    emailsSent: 0,
                    totalSubscribers: 0
                };
            }

            const results = {
                success: true,
                emailsSent: 0,
                failedEmails: 0,
                totalSubscribers: activeSubscriptions.length,
                details: []
            };

            // Generate content ID for tracking
            const contentId = `content_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

            // Send emails to all subscribers
            for (const subscription of activeSubscriptions) {
                try {
                    const emailContent = this.createEmailContent(content);
                    
                    // Replace placeholders with actual email
                    const personalizedContent = emailContent.replace(/\{\{EMAIL\}\}/g, subscription.email);

                    const mailOptions = {
                        from: `"Daily Network Learning" <${process.env.EMAIL}>`,
                        to: subscription.email,
                        subject: `Daily Network Learning: ${content.title}`,
                        html: personalizedContent
                    };

                    const info = await this.transporter.sendMail(mailOptions);
                    
                    // Mark email as sent
                    await subscriptionService.markEmailSent(subscription.email, contentId);
                    
                    results.emailsSent++;
                    results.details.push({
                        email: subscription.email,
                        status: 'success',
                        messageId: info.messageId
                    });

                    // Add small delay between emails to avoid rate limiting
                    await new Promise(resolve => setTimeout(resolve, 100));
                    
                } catch (error) {
                    console.error(`‚ùå Failed to send email to ${subscription.email}:`, error.message);
                    results.failedEmails++;
                    results.details.push({
                        email: subscription.email,
                        status: 'failed',
                        error: error.message
                    });
                }
            }

            return results;

        } catch (error) {
            console.error('Error sending daily emails:', error.message);
            throw error;
        }
    }

    /**
     * Send a single email to a specific user (for testing or manual sending)
     * @param {string} email - Recipient email
     * @param {Object} content - Email content
     * @returns {Promise<Object>} Email sending result
     */
    async sendSingleEmail(email, content) {
        try {
            const emailContent = this.createEmailContent(content);
            const personalizedContent = emailContent.replace(/\{\{EMAIL\}\}/g, email);

            const mailOptions = {
                from: `"Daily Network Learning" <${process.env.EMAIL}>`,
                to: email,
                subject: `Daily Network Learning: ${content.title}`,
                html: personalizedContent
            };

            const info = await this.transporter.sendMail(mailOptions);
            
            return {
                success: true,
                messageId: info.messageId,
                email: email
            };
        } catch (error) {
            console.error(`Error sending single email to ${email}:`, error.message);
            throw error;
        }
    }

    /**
     * Send welcome email to newly subscribed users
     * @param {string} email - Recipient email
     * @returns {Promise<Object>} Email sending result
     */
    async sendWelcomeEmail(email) {
        try {
            const welcomeContent = `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #2c3e50;">üéâ Welcome to Daily Network Learning!</h1>
                        <p style="color: #7f8c8d; font-size: 18px;">You're now part of our learning community!</p>
                    </div>
                    
                    <div style="background-color: #f8f9fa; padding: 25px; border-radius: 8px; margin: 20px 0;">
                        <h2 style="color: #34495e; margin-bottom: 15px;"> What to Expect</h2>
                        <ul style="padding-left: 20px; line-height: 1.8;">
                            <li><strong>Daily Learning Content:</strong> Computer networks concepts explained in simple terms</li>
                            <li><strong>Interactive Quizzes:</strong> Test your knowledge with daily questions</li>
                            <li><strong>Real-life Examples:</strong> Practical analogies to help you understand</li>
                            <li><strong>Key Points Summary:</strong> Quick reference for important concepts</li>
                        </ul>
                    </div>
                    
                    <div style="background-color: #e8f4f8; padding: 25px; border-radius: 8px; margin: 20px 0;">
                        <h2 style="color: #34495e; margin-bottom: 15px;"> Your First Email</h2>
                        <p>Your first learning email will arrive tomorrow at 8:00 AM. Get ready to dive into the fascinating world of computer networks!</p>
                    </div>
                    
                    <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee;">
                        <p style="color: #7f8c8d; font-size: 0.9em;">
                            <a href="${process.env.UNSUBSCRIBE_URL || 'http://localhost:3000/unsubscribe'}?email=${email}" 
                               style="color: #3498db; text-decoration: none;">Unsubscribe</a> | 
                            <a href="${process.env.PREFERENCES_URL || 'http://localhost:3000/preferences'}?email=${email}" 
                               style="color: #3498db; text-decoration: none;">Update Preferences</a>
                        </p>
                    </div>
                </div>
            `;

            const mailOptions = {
                from: `"Daily Network Learning" <${process.env.EMAIL}>`,
                to: email,
                subject: 'üéâ Welcome to Daily Network Learning!',
                html: welcomeContent
            };

            const info = await this.transporter.sendMail(mailOptions);
            
            return {
                success: true,
                messageId: info.messageId,
                email: email,
                type: 'welcome'
            };
        } catch (error) {
            console.error(`Error sending welcome email to ${email}:`, error.message);
            throw error;
        }
    }

    /**
     * Send goodbye email to unsubscribing users
     * @param {string} email - Recipient email
     * @returns {Promise<Object>} Email sending result
     */
    async sendGoodbyeEmail(email) {
        try {
            const goodbyeContent = `
                <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto; padding: 20px;">
                    <div style="text-align: center; margin-bottom: 30px;">
                        <h1 style="color: #2c3e50;"> We'll Miss You!</h1>
                        <p style="color: #7f8c8d; font-size: 18px;">Sorry to see you go from Daily Network Learning</p>
                    </div>
                    
                    <div style="background-color: #f8f9fa; padding: 25px; border-radius: 8px; margin: 20px 0;">
                        <h2 style="color: #34495e; margin-bottom: 15px;"> What You'll Miss</h2>
                        <ul style="padding-left: 20px; line-height: 1.8;">
                            <li>Daily computer networks learning content</li>
                            <li>Interactive quizzes and explanations</li>
                            <li>Real-life analogies and examples</li>
                            <li>Key points and summaries</li>
                        </ul>
                    </div>
                    
                    <div style="background-color: #e8f4f8; padding: 25px; border-radius: 8px; margin: 20px 0;">
                        <h2 style="color: #34495e; margin-bottom: 15px;">üîÑ Change Your Mind?</h2>
                        <p>You can always resubscribe anytime by visiting our website. Your learning journey doesn't have to end here!</p>
                        <p style="margin-top: 15px;">
                            <a href="${process.env.SUBSCRIBE_URL || 'http://localhost:3000/subscribe'}" 
                               style="background-color: #3498db; color: white; padding: 12px 24px; text-decoration: none; border-radius: 5px; display: inline-block;">
                                Resubscribe Now
                            </a>
                        </p>
                    </div>
                    
                    <div style="text-align: center; margin-top: 40px; padding-top: 20px; border-top: 1px solid #eee;">
                        <p style="color: #7f8c8d; font-size: 0.9em;">
                            Thank you for being part of our learning community. We hope to see you again soon!
                        </p>
                    </div>
                </div>
            `;

            const mailOptions = {
                from: `"Daily Network Learning" <${process.env.EMAIL}>`,
                to: email,
                subject: ' Goodbye from Daily Network Learning',
                html: goodbyeContent
            };

            const info = await this.transporter.sendMail(mailOptions);
            
            return {
                success: true,
                messageId: info.messageId,
                email: email,
                type: 'goodbye'
            };
        } catch (error) {
            console.error(`Error sending goodbye email to ${email}:`, error.message);
            throw error;
        }
    }
}

module.exports = new EmailService(); 